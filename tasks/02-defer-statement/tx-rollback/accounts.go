package accounts

import (
	"fmt"
)

type DB interface {
	Begin() (Tx, error)
}

type Tx interface {
	Exec(q string) error
	Commit() error
	Rollback() error
}

func Create(db DB) error {
	var err error

	tx, err := db.Begin()
	if err != nil {
		return fmt.Errorf("begin: %w", err)
	}

	defer func() {
		if err != nil {
			if errRollback := tx.Rollback(); errRollback != nil {
				err = fmt.Errorf("rollback: %w", errRollback)
			}
		} else {
			err = tx.Commit()
		}
	}()

	if err = tx.Exec(queryDropAccounts); err != nil {
		return fmt.Errorf("drop table: %w", err)
	}

	if err = tx.Exec(queryCreateAccounts); err != nil {
		return fmt.Errorf("create table: %w", err)
	}

	if err = tx.Exec(queryFillAccounts); err != nil {
		return fmt.Errorf("fill table: %w", err)
	}

	return err
}

const (
	queryDropAccounts = `
drop table accounts;
`

	queryCreateAccounts = `
create table accounts (
    id int generated by default as identity,
    name varchar(100) not null unique,
    balance dec(15,2) not null,
    primary key(id)
);`

	queryFillAccounts = `
insert into accounts(name,balance) values
    ('Bob',10000),
    ('Alice',10000);
`
)
